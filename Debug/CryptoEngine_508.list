
CryptoEngine_508.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a7c  08000a7c  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a7c  08000a7c  00002050  2**0
                  CONTENTS
  4 .ARM          00000000  08000a7c  08000a7c  00002050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a7c  08000a7c  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a7c  08000a7c  00001a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a80  08000a80  00001a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000a84  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  08000ad4  00002050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08000ad4  000021b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f36  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006bd  00000000  00000000  00002fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00003678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e5  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ef83  00000000  00000000  000038c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f4d  00000000  00000000  00012848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005350c  00000000  00000000  00015795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00068ca1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000690  00000000  00000000  00068ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00069374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000050 	.word	0x20000050
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a64 	.word	0x08000a64

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000054 	.word	0x20000054
 80001d0:	08000a64 	.word	0x08000a64

080001d4 <ComputeCRC16>:
 * polynomial x^16 + x^15 + x^2 + 1. The CRC is used to verify data integrity.
 * CRC-16 Polynomial (Hex):     0x8005
 * CRC-16 Polynomial (Binary):  0b1000 0000 0000 0101
 */
uint16_t ComputeCRC16(const uint8_t *data, size_t length)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	 // Initial value of the CRC code
    uint16_t CRC = 0x0000;
 80001de:	2300      	movs	r3, #0
 80001e0:	81fb      	strh	r3, [r7, #14]
    uint8_t bit;

    for (size_t i = 0; i < length; i++)
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]
 80001e6:	e025      	b.n	8000234 <ComputeCRC16+0x60>
    {
    	CRC ^= (uint16_t)data[i] << 8;
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	021b      	lsls	r3, r3, #8
 80001f2:	b21a      	sxth	r2, r3
 80001f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001f8:	4053      	eors	r3, r2
 80001fa:	b21b      	sxth	r3, r3
 80001fc:	81fb      	strh	r3, [r7, #14]

        for (bit = 0; bit < 8; bit++)
 80001fe:	2300      	movs	r3, #0
 8000200:	737b      	strb	r3, [r7, #13]
 8000202:	e011      	b.n	8000228 <ComputeCRC16+0x54>
        {
        	// Check if MSB is set
            if (CRC & 0x8000)
 8000204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000208:	2b00      	cmp	r3, #0
 800020a:	da07      	bge.n	800021c <ComputeCRC16+0x48>
            {

            	CRC = (CRC << 1) ^ 0x8005;
 800020c:	89fb      	ldrh	r3, [r7, #14]
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	b21a      	sxth	r2, r3
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <ComputeCRC16+0x78>)
 8000214:	4053      	eors	r3, r2
 8000216:	b21b      	sxth	r3, r3
 8000218:	81fb      	strh	r3, [r7, #14]
 800021a:	e002      	b.n	8000222 <ComputeCRC16+0x4e>
            }
            else
            {
            	CRC = CRC << 1;
 800021c:	89fb      	ldrh	r3, [r7, #14]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	81fb      	strh	r3, [r7, #14]
        for (bit = 0; bit < 8; bit++)
 8000222:	7b7b      	ldrb	r3, [r7, #13]
 8000224:	3301      	adds	r3, #1
 8000226:	737b      	strb	r3, [r7, #13]
 8000228:	7b7b      	ldrb	r3, [r7, #13]
 800022a:	2b07      	cmp	r3, #7
 800022c:	d9ea      	bls.n	8000204 <ComputeCRC16+0x30>
    for (size_t i = 0; i < length; i++)
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	3301      	adds	r3, #1
 8000232:	60bb      	str	r3, [r7, #8]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d3d5      	bcc.n	80001e8 <ComputeCRC16+0x14>
            }
        }
    }

    return CRC;
 800023c:	89fb      	ldrh	r3, [r7, #14]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	ffff8005 	.word	0xffff8005

08000250 <StuffGroup>:

/* Function to populate the Group buffer with Count, Data packet
 * and 16-bit CRC value at the end of the buffer.
 */
uint8_t *StuffGroup(const uint8_t *packet_data, size_t packet_size, size_t *out_size)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]
    // Total group size: count (1) + packet + CRC (2)
    *out_size = 1 + packet_size + 2;
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	1cda      	adds	r2, r3, #3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	601a      	str	r2, [r3, #0]
    // Create buffer array of type uint8_t
    uint8_t *group = (uint8_t *)malloc(*out_size);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f000 faa1 	bl	80007b0 <malloc>
 800026e:	4603      	mov	r3, r0
 8000270:	61bb      	str	r3, [r7, #24]
    if (!group)
 8000272:	69bb      	ldr	r3, [r7, #24]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d101      	bne.n	800027c <StuffGroup+0x2c>
    {
        return NULL;
 8000278:	2300      	movs	r3, #0
 800027a:	e033      	b.n	80002e4 <StuffGroup+0x94>
    }
    // Fill Count (count byte + packet + CRC)
    group[0] = (uint8_t)(packet_size + 3);
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	3303      	adds	r3, #3
 8000282:	b2da      	uxtb	r2, r3
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	701a      	strb	r2, [r3, #0]
    // Copy packet data into group
    for (size_t i = 0; i < packet_size; i++)
 8000288:	2300      	movs	r3, #0
 800028a:	61fb      	str	r3, [r7, #28]
 800028c:	e00b      	b.n	80002a6 <StuffGroup+0x56>
    {
        group[1 + i] = packet_data[i];
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	69fb      	ldr	r3, [r7, #28]
 8000292:	441a      	add	r2, r3
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	3301      	adds	r3, #1
 8000298:	69b9      	ldr	r1, [r7, #24]
 800029a:	440b      	add	r3, r1
 800029c:	7812      	ldrb	r2, [r2, #0]
 800029e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < packet_size; i++)
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	3301      	adds	r3, #1
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	69fa      	ldr	r2, [r7, #28]
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d3ef      	bcc.n	800028e <StuffGroup+0x3e>
    }
    // Calculate CRC
    uint16_t crc = ComputeCRC16(group, 1 + packet_size);
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	3301      	adds	r3, #1
 80002b2:	4619      	mov	r1, r3
 80002b4:	69b8      	ldr	r0, [r7, #24]
 80002b6:	f7ff ff8d 	bl	80001d4 <ComputeCRC16>
 80002ba:	4603      	mov	r3, r0
 80002bc:	82fb      	strh	r3, [r7, #22]
    // Append 16-bit CRC value as two bytes at the end of the buffer
    group[*out_size - 2] = (uint8_t)(crc & 0xFF);        // CRC Low byte
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	3b02      	subs	r3, #2
 80002c4:	69ba      	ldr	r2, [r7, #24]
 80002c6:	4413      	add	r3, r2
 80002c8:	8afa      	ldrh	r2, [r7, #22]
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	701a      	strb	r2, [r3, #0]
    group[*out_size - 1] = (uint8_t)((crc >> 8) & 0xFF); // CRC High byte
 80002ce:	8afb      	ldrh	r3, [r7, #22]
 80002d0:	0a1b      	lsrs	r3, r3, #8
 80002d2:	b299      	uxth	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3b01      	subs	r3, #1
 80002da:	69ba      	ldr	r2, [r7, #24]
 80002dc:	4413      	add	r3, r2
 80002de:	b2ca      	uxtb	r2, r1
 80002e0:	701a      	strb	r2, [r3, #0]
    // Return the buffer for transmission
    return group;
 80002e2:	69bb      	ldr	r3, [r7, #24]
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3720      	adds	r7, #32
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <StuffPacket>:
#include <string.h>

/* Function to populate the packet buffer with Opcode, Parameters and Data.
 */
uint8_t *StuffPacket(const Packet *packet, size_t *out_size)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
    // Calculate total size: opcode (1) + param1 (1) + param2 (2) + data
    *out_size = 1 + 1 + 2 + packet->data_length;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	1d1a      	adds	r2, r3, #4
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	601a      	str	r2, [r3, #0]
    // Create buffer array of type uint8_t
    uint8_t *buffer = (uint8_t *)malloc(*out_size);
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fa53 	bl	80007b0 <malloc>
 800030a:	4603      	mov	r3, r0
 800030c:	60fb      	str	r3, [r7, #12]
    if (!buffer)
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d101      	bne.n	8000318 <StuffPacket+0x2c>
    {
        return NULL;
 8000314:	2300      	movs	r3, #0
 8000316:	e028      	b.n	800036a <StuffPacket+0x7e>
    }
    // Populate the Opcode and Parameters
    buffer[0] = packet->opcode;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	701a      	strb	r2, [r3, #0]
    buffer[1] = packet->param1;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	7852      	ldrb	r2, [r2, #1]
 8000328:	701a      	strb	r2, [r3, #0]
    buffer[2] = (uint8_t)(packet->param2 & 0xFF);        // Low byte of param2
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	885a      	ldrh	r2, [r3, #2]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3302      	adds	r3, #2
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	701a      	strb	r2, [r3, #0]
    buffer[3] = (uint8_t)((packet->param2 >> 8) & 0xFF); // High byte of param2
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	885b      	ldrh	r3, [r3, #2]
 800033a:	0a1b      	lsrs	r3, r3, #8
 800033c:	b29a      	uxth	r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3303      	adds	r3, #3
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	701a      	strb	r2, [r3, #0]
    // If packet contains valid data, copy contents to buffer
    if (packet->data_length > 0 && packet->data)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d00c      	beq.n	8000368 <StuffPacket+0x7c>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d008      	beq.n	8000368 <StuffPacket+0x7c>
    {
        memcpy(&buffer[4], packet->data, packet->data_length);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	1d18      	adds	r0, r3, #4
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	6859      	ldr	r1, [r3, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	461a      	mov	r2, r3
 8000364:	f000 fb26 	bl	80009b4 <memcpy>
    }
    // Return the buffer to stuff group
    return buffer;
 8000368:	68fb      	ldr	r3, [r7, #12]
}
 800036a:	4618      	mov	r0, r3
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <WriteCommand>:

/* Function to Send Group of bytes to the Slave device
 */

int WriteCommand(const uint8_t *group_data, size_t group_size)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b084      	sub	sp, #16
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	6039      	str	r1, [r7, #0]
    if (!group_data || group_size == 0)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <WriteCommand+0x16>
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d102      	bne.n	800038e <WriteCommand+0x1c>
    {
        return -1;
 8000388:	f04f 33ff 	mov.w	r3, #4294967295
 800038c:	e019      	b.n	80003c2 <WriteCommand+0x50>
    }

    I2C1_Start();
 800038e:	f000 f927 	bl	80005e0 <I2C1_Start>
    I2C1_SendAddress(ATECC508A_I2C_ADDRESS, 0);
 8000392:	2100      	movs	r1, #0
 8000394:	20c0      	movs	r0, #192	@ 0xc0
 8000396:	f000 f93b 	bl	8000610 <I2C1_SendAddress>
    for (size_t i = 0; i < group_size; i++)
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	e009      	b.n	80003b4 <WriteCommand+0x42>
    {
        I2C1_SendData(group_data[i]);
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4413      	add	r3, r2
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f959 	bl	8000660 <I2C1_SendData>
    for (size_t i = 0; i < group_size; i++)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3301      	adds	r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d3f1      	bcc.n	80003a0 <WriteCommand+0x2e>
    }
    I2C1_Stop();
 80003bc:	f000 f97e 	bl	80006bc <I2C1_Stop>

    return 0;
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <ReadResponse>:

/* Function to Receive bytes of data from the Slave Device
 */
int ReadResponse(uint8_t *response, size_t response_size)
{
 80003ca:	b590      	push	{r4, r7, lr}
 80003cc:	b085      	sub	sp, #20
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    if (!response || response_size == 0)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <ReadResponse+0x16>
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <ReadResponse+0x1c>
    {
        return -1;
 80003e0:	f04f 33ff 	mov.w	r3, #4294967295
 80003e4:	e019      	b.n	800041a <ReadResponse+0x50>
    }

    I2C1_Start();
 80003e6:	f000 f8fb 	bl	80005e0 <I2C1_Start>
    I2C1_SendAddress(ATECC508A_I2C_ADDRESS, 1);
 80003ea:	2101      	movs	r1, #1
 80003ec:	20c0      	movs	r0, #192	@ 0xc0
 80003ee:	f000 f90f 	bl	8000610 <I2C1_SendAddress>
    for (size_t i = 0; i < response_size; i++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	e009      	b.n	800040c <ReadResponse+0x42>
    {
        response[i] = I2C1_ReadData();
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	18d4      	adds	r4, r2, r3
 80003fe:	f000 f947 	bl	8000690 <I2C1_ReadData>
 8000402:	4603      	mov	r3, r0
 8000404:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < response_size; i++)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	3301      	adds	r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	429a      	cmp	r2, r3
 8000412:	d3f1      	bcc.n	80003f8 <ReadResponse+0x2e>
    }
    I2C1_Stop();
 8000414:	f000 f952 	bl	80006bc <I2C1_Stop>

    return 0;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bd90      	pop	{r4, r7, pc}

08000422 <ATECC508A_GenerateRandom>:
#define MODE1			0x01
#define ZERO8			0x00
#define ZERO16			0x0000

int ATECC508A_GenerateRandom(uint8_t *random_number)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b094      	sub	sp, #80	@ 0x50
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
    if (!random_number)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d102      	bne.n	8000436 <ATECC508A_GenerateRandom+0x14>
    {
        return -1;
 8000430:	f04f 33ff 	mov.w	r3, #4294967295
 8000434:	e077      	b.n	8000526 <ATECC508A_GenerateRandom+0x104>
    }

    Packet random_packet =
 8000436:	231b      	movs	r3, #27
 8000438:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800043c:	2300      	movs	r3, #0
 800043e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000442:	2300      	movs	r3, #0
 8000444:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8000446:	2300      	movs	r3, #0
 8000448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800044a:	2300      	movs	r3, #0
 800044c:	643b      	str	r3, [r7, #64]	@ 0x40
        .data = NULL,
        .data_length = 0
    };

    size_t packet_size;
    uint8_t *packet_data = StuffPacket(&random_packet, &packet_size);
 800044e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000452:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000456:	4611      	mov	r1, r2
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff47 	bl	80002ec <StuffPacket>
 800045e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (!packet_data)
 8000460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000462:	2b00      	cmp	r3, #0
 8000464:	d102      	bne.n	800046c <ATECC508A_GenerateRandom+0x4a>
    {
        return -2;
 8000466:	f06f 0301 	mvn.w	r3, #1
 800046a:	e05c      	b.n	8000526 <ATECC508A_GenerateRandom+0x104>
    }

    size_t group_size;
    uint8_t *group_data = StuffGroup(packet_data, packet_size, &group_size);
 800046c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800046e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000472:	4619      	mov	r1, r3
 8000474:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000476:	f7ff feeb 	bl	8000250 <StuffGroup>
 800047a:	64b8      	str	r0, [r7, #72]	@ 0x48
    free(packet_data);
 800047c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800047e:	f000 f99f 	bl	80007c0 <free>

    if (!group_data)
 8000482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <ATECC508A_GenerateRandom+0x6c>
    {
        return -3;
 8000488:	f06f 0302 	mvn.w	r3, #2
 800048c:	e04b      	b.n	8000526 <ATECC508A_GenerateRandom+0x104>
    }

    if (WriteCommand(group_data, group_size) != 0)
 800048e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000490:	4619      	mov	r1, r3
 8000492:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000494:	f7ff ff6d 	bl	8000372 <WriteCommand>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d005      	beq.n	80004aa <ATECC508A_GenerateRandom+0x88>
    {
        free(group_data);
 800049e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80004a0:	f000 f98e 	bl	80007c0 <free>
        return -4;
 80004a4:	f06f 0303 	mvn.w	r3, #3
 80004a8:	e03d      	b.n	8000526 <ATECC508A_GenerateRandom+0x104>
    }
    free(group_data);
 80004aa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80004ac:	f000 f988 	bl	80007c0 <free>

    uint8_t response[35] = {0};
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	221f      	movs	r2, #31
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fa35 	bl	800092c <memset>
    if (ReadResponse(response, sizeof(response)) != 0)
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	2123      	movs	r1, #35	@ 0x23
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff7e 	bl	80003ca <ReadResponse>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d002      	beq.n	80004da <ATECC508A_GenerateRandom+0xb8>
    {
        return -5;
 80004d4:	f06f 0304 	mvn.w	r3, #4
 80004d8:	e025      	b.n	8000526 <ATECC508A_GenerateRandom+0x104>
    }

    uint16_t calculated_crc = ComputeCRC16(response, sizeof(response) - 2);
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	2121      	movs	r1, #33	@ 0x21
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fe77 	bl	80001d4 <ComputeCRC16>
 80004e6:	4603      	mov	r3, r0
 80004e8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t response_crc = (response[33] | (response[34] << 8));
 80004ec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80004f0:	b21a      	sxth	r2, r3
 80004f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80004f6:	021b      	lsls	r3, r3, #8
 80004f8:	b21b      	sxth	r3, r3
 80004fa:	4313      	orrs	r3, r2
 80004fc:	b21b      	sxth	r3, r3
 80004fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    if (calculated_crc != response_crc)
 8000502:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8000506:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800050a:	429a      	cmp	r2, r3
 800050c:	d002      	beq.n	8000514 <ATECC508A_GenerateRandom+0xf2>
    {
        return -6;
 800050e:	f06f 0305 	mvn.w	r3, #5
 8000512:	e008      	b.n	8000526 <ATECC508A_GenerateRandom+0x104>
    }

    memcpy(random_number, &response[1], 32);
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	3301      	adds	r3, #1
 800051a:	2220      	movs	r2, #32
 800051c:	4619      	mov	r1, r3
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f000 fa48 	bl	80009b4 <memcpy>

    return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	3750      	adds	r7, #80	@ 0x50
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <I2C1_Init>:
#include "Drivers/I2C.h"

void I2C1_Init(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
    // Enable the I2C1 and GPIOB clocks
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;  // Enable I2C1 clock
 8000534:	4b27      	ldr	r3, [pc, #156]	@ (80005d4 <I2C1_Init+0xa4>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	4a26      	ldr	r2, [pc, #152]	@ (80005d4 <I2C1_Init+0xa4>)
 800053a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800053e:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable GPIOB clock
 8000540:	4b24      	ldr	r3, [pc, #144]	@ (80005d4 <I2C1_Init+0xa4>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000544:	4a23      	ldr	r2, [pc, #140]	@ (80005d4 <I2C1_Init+0xa4>)
 8000546:	f043 0302 	orr.w	r3, r3, #2
 800054a:	6313      	str	r3, [r2, #48]	@ 0x30
    // Configure PB8 (SCL) and PB9 (SDA) for I2C alternate function
    GPIOB->MODER &= ~((3U << 2 * 8) | (3U << 2 * 9));  // Clear bits
 800054c:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <I2C1_Init+0xa8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <I2C1_Init+0xa8>)
 8000552:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000556:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2U << 2 * 8) | (2U << 2 * 9);     // Set to AF mode (10)
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <I2C1_Init+0xa8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1e      	ldr	r2, [pc, #120]	@ (80005d8 <I2C1_Init+0xa8>)
 800055e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000562:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] |= (4U << 4 * (8 - 8)) | (4U << 4 * (9 - 8));  // Set AF4 (I2C) for PB8 and PB9
 8000564:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <I2C1_Init+0xa8>)
 8000566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000568:	4a1b      	ldr	r2, [pc, #108]	@ (80005d8 <I2C1_Init+0xa8>)
 800056a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800056e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1U << 8) | (1U << 9);            // Open-drain for I2C
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <I2C1_Init+0xa8>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <I2C1_Init+0xa8>)
 8000576:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800057a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << 2 * 8) | (3U << 2 * 9);   // High speed
 800057c:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <I2C1_Init+0xa8>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4a15      	ldr	r2, [pc, #84]	@ (80005d8 <I2C1_Init+0xa8>)
 8000582:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000586:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR |= (1U << 2 * 8) | (1U << 2 * 9);     // Pull-up resistors
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <I2C1_Init+0xa8>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <I2C1_Init+0xa8>)
 800058e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000592:	60d3      	str	r3, [r2, #12]
    // Reset I2C1 to clear any previous settings
    I2C1->CR1 |= I2C_CR1_SWRST;
 8000594:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <I2C1_Init+0xac>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a10      	ldr	r2, [pc, #64]	@ (80005dc <I2C1_Init+0xac>)
 800059a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800059e:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <I2C1_Init+0xac>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <I2C1_Init+0xac>)
 80005a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80005aa:	6013      	str	r3, [r2, #0]
    // Set the I2C clock frequency (APB1 is running at 42MHz)
    I2C1->CR2 = 42;  // 42 MHz APB1 clock
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <I2C1_Init+0xac>)
 80005ae:	222a      	movs	r2, #42	@ 0x2a
 80005b0:	605a      	str	r2, [r3, #4]
    // Configure clock control for 400kHz I2C operation
    I2C1->CCR = 0x50;  // CCR = 80, Fast mode, 400kHz (see reference manual for calculations)
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <I2C1_Init+0xac>)
 80005b4:	2250      	movs	r2, #80	@ 0x50
 80005b6:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;  // Maximum rise time
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <I2C1_Init+0xac>)
 80005ba:	222b      	movs	r2, #43	@ 0x2b
 80005bc:	621a      	str	r2, [r3, #32]
    // Enable I2C1
    I2C1->CR1 |= I2C_CR1_PE;
 80005be:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <I2C1_Init+0xac>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <I2C1_Init+0xac>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020400 	.word	0x40020400
 80005dc:	40005400 	.word	0x40005400

080005e0 <I2C1_Start>:

// Function to generate a start condition on I2C1
void I2C1_Start(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;  // Generate start condition
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <I2C1_Start+0x2c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a08      	ldr	r2, [pc, #32]	@ (800060c <I2C1_Start+0x2c>)
 80005ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ee:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));  // Wait for start condition generated
 80005f0:	bf00      	nop
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <I2C1_Start+0x2c>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <I2C1_Start+0x12>
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40005400 	.word	0x40005400

08000610 <I2C1_SendAddress>:

// Function to send the EEPROM address and wait for acknowledgment
void I2C1_SendAddress(uint8_t address, bool mode)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
	if(mode) // Execute in READ Mode
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <I2C1_SendAddress+0x24>
	{
		// Send the 7-bit address with the read bit
		I2C1->DR = ((address << 1) | 0x01);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	f043 0201 	orr.w	r2, r3, #1
 800062e:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <I2C1_SendAddress+0x4c>)
 8000630:	611a      	str	r2, [r3, #16]
 8000632:	e003      	b.n	800063c <I2C1_SendAddress+0x2c>
	}
	else     // Execute in WRITE Mode
	{
		// Send the 7-bit address with the write bit
		I2C1->DR = (address << 1);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <I2C1_SendAddress+0x4c>)
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	6113      	str	r3, [r2, #16]
	}
	// Wait for address acknowledgment
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800063c:	bf00      	nop
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <I2C1_SendAddress+0x4c>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f9      	beq.n	800063e <I2C1_SendAddress+0x2e>
    // Clear the ADDR flag by reading SR2
    (void)I2C1->SR2;
 800064a:	4b04      	ldr	r3, [pc, #16]	@ (800065c <I2C1_SendAddress+0x4c>)
 800064c:	699b      	ldr	r3, [r3, #24]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40005400 	.word	0x40005400

08000660 <I2C1_SendData>:

// Function to send a byte of data on I2C1
void I2C1_SendData(uint8_t data)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));  // Wait for data register empty
 800066a:	bf00      	nop
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <I2C1_SendData+0x2c>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f9      	beq.n	800066c <I2C1_SendData+0xc>
    I2C1->DR = data;  // Load data into the data register
 8000678:	4a04      	ldr	r2, [pc, #16]	@ (800068c <I2C1_SendData+0x2c>)
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	6113      	str	r3, [r2, #16]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40005400 	.word	0x40005400

08000690 <I2C1_ReadData>:
	(void)I2C1->SR2;
}

// Function to receive a byte of data on I2C1
uint8_t I2C1_ReadData(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
	// Wait for data register to be filled
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 8000696:	bf00      	nop
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <I2C1_ReadData+0x28>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f9      	beq.n	8000698 <I2C1_ReadData+0x8>
	// Load data into the variable
    uint8_t data = I2C1->DR;
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <I2C1_ReadData+0x28>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	71fb      	strb	r3, [r7, #7]
    // Return the 8-bit Data
    return data;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40005400 	.word	0x40005400

080006bc <I2C1_Stop>:

// Function to generate a stop condition on I2C1
void I2C1_Stop(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;  // Generate stop condition
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <I2C1_Stop+0x1c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <I2C1_Stop+0x1c>)
 80006c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40005400 	.word	0x40005400

080006dc <main>:
#include <stdint.h>
#include "ATECC508A/operations/atecc508a_random.h"
#include "Drivers/I2C.h"

int main()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	uint8_t val[4];
	I2C1_Init();
 80006e2:	f7ff ff25 	bl	8000530 <I2C1_Init>

	while(1)
	{
		ATECC508A_GenerateRandom(val);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fe9a 	bl	8000422 <ATECC508A_GenerateRandom>
 80006ee:	e7fa      	b.n	80006e6 <main+0xa>

080006f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <_sbrk+0x5c>)
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <_sbrk+0x60>)
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <_sbrk+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <_sbrk+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d207      	bcs.n	8000730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000720:	f000 f91c 	bl	800095c <__errno>
 8000724:	4603      	mov	r3, r0
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	e009      	b.n	8000744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <_sbrk+0x64>)
 8000740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20018000 	.word	0x20018000
 8000750:	00000400 	.word	0x00000400
 8000754:	2000006c 	.word	0x2000006c
 8000758:	200001b8 	.word	0x200001b8

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	@ (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	@ (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078a:	f000 f8ed 	bl	8000968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff ffa5 	bl	80006dc <main>

08000792 <LoopForever>:

LoopForever:
  b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80007a0:	08000a84 	.word	0x08000a84
  ldr r2, =_sbss
 80007a4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80007a8:	200001b8 	.word	0x200001b8

080007ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC_IRQHandler>
	...

080007b0 <malloc>:
 80007b0:	4b02      	ldr	r3, [pc, #8]	@ (80007bc <malloc+0xc>)
 80007b2:	4601      	mov	r1, r0
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	f000 b82d 	b.w	8000814 <_malloc_r>
 80007ba:	bf00      	nop
 80007bc:	20000000 	.word	0x20000000

080007c0 <free>:
 80007c0:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <free+0xc>)
 80007c2:	4601      	mov	r1, r0
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	f000 b903 	b.w	80009d0 <_free_r>
 80007ca:	bf00      	nop
 80007cc:	20000000 	.word	0x20000000

080007d0 <sbrk_aligned>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	4e0f      	ldr	r6, [pc, #60]	@ (8000810 <sbrk_aligned+0x40>)
 80007d4:	460c      	mov	r4, r1
 80007d6:	6831      	ldr	r1, [r6, #0]
 80007d8:	4605      	mov	r5, r0
 80007da:	b911      	cbnz	r1, 80007e2 <sbrk_aligned+0x12>
 80007dc:	f000 f8ae 	bl	800093c <_sbrk_r>
 80007e0:	6030      	str	r0, [r6, #0]
 80007e2:	4621      	mov	r1, r4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f000 f8a9 	bl	800093c <_sbrk_r>
 80007ea:	1c43      	adds	r3, r0, #1
 80007ec:	d103      	bne.n	80007f6 <sbrk_aligned+0x26>
 80007ee:	f04f 34ff 	mov.w	r4, #4294967295
 80007f2:	4620      	mov	r0, r4
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	1cc4      	adds	r4, r0, #3
 80007f8:	f024 0403 	bic.w	r4, r4, #3
 80007fc:	42a0      	cmp	r0, r4
 80007fe:	d0f8      	beq.n	80007f2 <sbrk_aligned+0x22>
 8000800:	1a21      	subs	r1, r4, r0
 8000802:	4628      	mov	r0, r5
 8000804:	f000 f89a 	bl	800093c <_sbrk_r>
 8000808:	3001      	adds	r0, #1
 800080a:	d1f2      	bne.n	80007f2 <sbrk_aligned+0x22>
 800080c:	e7ef      	b.n	80007ee <sbrk_aligned+0x1e>
 800080e:	bf00      	nop
 8000810:	20000070 	.word	0x20000070

08000814 <_malloc_r>:
 8000814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000818:	1ccd      	adds	r5, r1, #3
 800081a:	f025 0503 	bic.w	r5, r5, #3
 800081e:	3508      	adds	r5, #8
 8000820:	2d0c      	cmp	r5, #12
 8000822:	bf38      	it	cc
 8000824:	250c      	movcc	r5, #12
 8000826:	2d00      	cmp	r5, #0
 8000828:	4606      	mov	r6, r0
 800082a:	db01      	blt.n	8000830 <_malloc_r+0x1c>
 800082c:	42a9      	cmp	r1, r5
 800082e:	d904      	bls.n	800083a <_malloc_r+0x26>
 8000830:	230c      	movs	r3, #12
 8000832:	6033      	str	r3, [r6, #0]
 8000834:	2000      	movs	r0, #0
 8000836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800083a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000910 <_malloc_r+0xfc>
 800083e:	f000 f869 	bl	8000914 <__malloc_lock>
 8000842:	f8d8 3000 	ldr.w	r3, [r8]
 8000846:	461c      	mov	r4, r3
 8000848:	bb44      	cbnz	r4, 800089c <_malloc_r+0x88>
 800084a:	4629      	mov	r1, r5
 800084c:	4630      	mov	r0, r6
 800084e:	f7ff ffbf 	bl	80007d0 <sbrk_aligned>
 8000852:	1c43      	adds	r3, r0, #1
 8000854:	4604      	mov	r4, r0
 8000856:	d158      	bne.n	800090a <_malloc_r+0xf6>
 8000858:	f8d8 4000 	ldr.w	r4, [r8]
 800085c:	4627      	mov	r7, r4
 800085e:	2f00      	cmp	r7, #0
 8000860:	d143      	bne.n	80008ea <_malloc_r+0xd6>
 8000862:	2c00      	cmp	r4, #0
 8000864:	d04b      	beq.n	80008fe <_malloc_r+0xea>
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	4639      	mov	r1, r7
 800086a:	4630      	mov	r0, r6
 800086c:	eb04 0903 	add.w	r9, r4, r3
 8000870:	f000 f864 	bl	800093c <_sbrk_r>
 8000874:	4581      	cmp	r9, r0
 8000876:	d142      	bne.n	80008fe <_malloc_r+0xea>
 8000878:	6821      	ldr	r1, [r4, #0]
 800087a:	1a6d      	subs	r5, r5, r1
 800087c:	4629      	mov	r1, r5
 800087e:	4630      	mov	r0, r6
 8000880:	f7ff ffa6 	bl	80007d0 <sbrk_aligned>
 8000884:	3001      	adds	r0, #1
 8000886:	d03a      	beq.n	80008fe <_malloc_r+0xea>
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	442b      	add	r3, r5
 800088c:	6023      	str	r3, [r4, #0]
 800088e:	f8d8 3000 	ldr.w	r3, [r8]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	bb62      	cbnz	r2, 80008f0 <_malloc_r+0xdc>
 8000896:	f8c8 7000 	str.w	r7, [r8]
 800089a:	e00f      	b.n	80008bc <_malloc_r+0xa8>
 800089c:	6822      	ldr	r2, [r4, #0]
 800089e:	1b52      	subs	r2, r2, r5
 80008a0:	d420      	bmi.n	80008e4 <_malloc_r+0xd0>
 80008a2:	2a0b      	cmp	r2, #11
 80008a4:	d917      	bls.n	80008d6 <_malloc_r+0xc2>
 80008a6:	1961      	adds	r1, r4, r5
 80008a8:	42a3      	cmp	r3, r4
 80008aa:	6025      	str	r5, [r4, #0]
 80008ac:	bf18      	it	ne
 80008ae:	6059      	strne	r1, [r3, #4]
 80008b0:	6863      	ldr	r3, [r4, #4]
 80008b2:	bf08      	it	eq
 80008b4:	f8c8 1000 	streq.w	r1, [r8]
 80008b8:	5162      	str	r2, [r4, r5]
 80008ba:	604b      	str	r3, [r1, #4]
 80008bc:	4630      	mov	r0, r6
 80008be:	f000 f82f 	bl	8000920 <__malloc_unlock>
 80008c2:	f104 000b 	add.w	r0, r4, #11
 80008c6:	1d23      	adds	r3, r4, #4
 80008c8:	f020 0007 	bic.w	r0, r0, #7
 80008cc:	1ac2      	subs	r2, r0, r3
 80008ce:	bf1c      	itt	ne
 80008d0:	1a1b      	subne	r3, r3, r0
 80008d2:	50a3      	strne	r3, [r4, r2]
 80008d4:	e7af      	b.n	8000836 <_malloc_r+0x22>
 80008d6:	6862      	ldr	r2, [r4, #4]
 80008d8:	42a3      	cmp	r3, r4
 80008da:	bf0c      	ite	eq
 80008dc:	f8c8 2000 	streq.w	r2, [r8]
 80008e0:	605a      	strne	r2, [r3, #4]
 80008e2:	e7eb      	b.n	80008bc <_malloc_r+0xa8>
 80008e4:	4623      	mov	r3, r4
 80008e6:	6864      	ldr	r4, [r4, #4]
 80008e8:	e7ae      	b.n	8000848 <_malloc_r+0x34>
 80008ea:	463c      	mov	r4, r7
 80008ec:	687f      	ldr	r7, [r7, #4]
 80008ee:	e7b6      	b.n	800085e <_malloc_r+0x4a>
 80008f0:	461a      	mov	r2, r3
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	42a3      	cmp	r3, r4
 80008f6:	d1fb      	bne.n	80008f0 <_malloc_r+0xdc>
 80008f8:	2300      	movs	r3, #0
 80008fa:	6053      	str	r3, [r2, #4]
 80008fc:	e7de      	b.n	80008bc <_malloc_r+0xa8>
 80008fe:	230c      	movs	r3, #12
 8000900:	6033      	str	r3, [r6, #0]
 8000902:	4630      	mov	r0, r6
 8000904:	f000 f80c 	bl	8000920 <__malloc_unlock>
 8000908:	e794      	b.n	8000834 <_malloc_r+0x20>
 800090a:	6005      	str	r5, [r0, #0]
 800090c:	e7d6      	b.n	80008bc <_malloc_r+0xa8>
 800090e:	bf00      	nop
 8000910:	20000074 	.word	0x20000074

08000914 <__malloc_lock>:
 8000914:	4801      	ldr	r0, [pc, #4]	@ (800091c <__malloc_lock+0x8>)
 8000916:	f000 b84b 	b.w	80009b0 <__retarget_lock_acquire_recursive>
 800091a:	bf00      	nop
 800091c:	200001b4 	.word	0x200001b4

08000920 <__malloc_unlock>:
 8000920:	4801      	ldr	r0, [pc, #4]	@ (8000928 <__malloc_unlock+0x8>)
 8000922:	f000 b846 	b.w	80009b2 <__retarget_lock_release_recursive>
 8000926:	bf00      	nop
 8000928:	200001b4 	.word	0x200001b4

0800092c <memset>:
 800092c:	4402      	add	r2, r0
 800092e:	4603      	mov	r3, r0
 8000930:	4293      	cmp	r3, r2
 8000932:	d100      	bne.n	8000936 <memset+0xa>
 8000934:	4770      	bx	lr
 8000936:	f803 1b01 	strb.w	r1, [r3], #1
 800093a:	e7f9      	b.n	8000930 <memset+0x4>

0800093c <_sbrk_r>:
 800093c:	b538      	push	{r3, r4, r5, lr}
 800093e:	4d06      	ldr	r5, [pc, #24]	@ (8000958 <_sbrk_r+0x1c>)
 8000940:	2300      	movs	r3, #0
 8000942:	4604      	mov	r4, r0
 8000944:	4608      	mov	r0, r1
 8000946:	602b      	str	r3, [r5, #0]
 8000948:	f7ff fed2 	bl	80006f0 <_sbrk>
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	d102      	bne.n	8000956 <_sbrk_r+0x1a>
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	b103      	cbz	r3, 8000956 <_sbrk_r+0x1a>
 8000954:	6023      	str	r3, [r4, #0]
 8000956:	bd38      	pop	{r3, r4, r5, pc}
 8000958:	200001b0 	.word	0x200001b0

0800095c <__errno>:
 800095c:	4b01      	ldr	r3, [pc, #4]	@ (8000964 <__errno+0x8>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000000 	.word	0x20000000

08000968 <__libc_init_array>:
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4d0d      	ldr	r5, [pc, #52]	@ (80009a0 <__libc_init_array+0x38>)
 800096c:	4c0d      	ldr	r4, [pc, #52]	@ (80009a4 <__libc_init_array+0x3c>)
 800096e:	1b64      	subs	r4, r4, r5
 8000970:	10a4      	asrs	r4, r4, #2
 8000972:	2600      	movs	r6, #0
 8000974:	42a6      	cmp	r6, r4
 8000976:	d109      	bne.n	800098c <__libc_init_array+0x24>
 8000978:	4d0b      	ldr	r5, [pc, #44]	@ (80009a8 <__libc_init_array+0x40>)
 800097a:	4c0c      	ldr	r4, [pc, #48]	@ (80009ac <__libc_init_array+0x44>)
 800097c:	f000 f872 	bl	8000a64 <_init>
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	10a4      	asrs	r4, r4, #2
 8000984:	2600      	movs	r6, #0
 8000986:	42a6      	cmp	r6, r4
 8000988:	d105      	bne.n	8000996 <__libc_init_array+0x2e>
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000990:	4798      	blx	r3
 8000992:	3601      	adds	r6, #1
 8000994:	e7ee      	b.n	8000974 <__libc_init_array+0xc>
 8000996:	f855 3b04 	ldr.w	r3, [r5], #4
 800099a:	4798      	blx	r3
 800099c:	3601      	adds	r6, #1
 800099e:	e7f2      	b.n	8000986 <__libc_init_array+0x1e>
 80009a0:	08000a7c 	.word	0x08000a7c
 80009a4:	08000a7c 	.word	0x08000a7c
 80009a8:	08000a7c 	.word	0x08000a7c
 80009ac:	08000a80 	.word	0x08000a80

080009b0 <__retarget_lock_acquire_recursive>:
 80009b0:	4770      	bx	lr

080009b2 <__retarget_lock_release_recursive>:
 80009b2:	4770      	bx	lr

080009b4 <memcpy>:
 80009b4:	440a      	add	r2, r1
 80009b6:	4291      	cmp	r1, r2
 80009b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80009bc:	d100      	bne.n	80009c0 <memcpy+0xc>
 80009be:	4770      	bx	lr
 80009c0:	b510      	push	{r4, lr}
 80009c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80009c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80009ca:	4291      	cmp	r1, r2
 80009cc:	d1f9      	bne.n	80009c2 <memcpy+0xe>
 80009ce:	bd10      	pop	{r4, pc}

080009d0 <_free_r>:
 80009d0:	b538      	push	{r3, r4, r5, lr}
 80009d2:	4605      	mov	r5, r0
 80009d4:	2900      	cmp	r1, #0
 80009d6:	d041      	beq.n	8000a5c <_free_r+0x8c>
 80009d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009dc:	1f0c      	subs	r4, r1, #4
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bfb8      	it	lt
 80009e2:	18e4      	addlt	r4, r4, r3
 80009e4:	f7ff ff96 	bl	8000914 <__malloc_lock>
 80009e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <_free_r+0x90>)
 80009ea:	6813      	ldr	r3, [r2, #0]
 80009ec:	b933      	cbnz	r3, 80009fc <_free_r+0x2c>
 80009ee:	6063      	str	r3, [r4, #4]
 80009f0:	6014      	str	r4, [r2, #0]
 80009f2:	4628      	mov	r0, r5
 80009f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009f8:	f7ff bf92 	b.w	8000920 <__malloc_unlock>
 80009fc:	42a3      	cmp	r3, r4
 80009fe:	d908      	bls.n	8000a12 <_free_r+0x42>
 8000a00:	6820      	ldr	r0, [r4, #0]
 8000a02:	1821      	adds	r1, r4, r0
 8000a04:	428b      	cmp	r3, r1
 8000a06:	bf01      	itttt	eq
 8000a08:	6819      	ldreq	r1, [r3, #0]
 8000a0a:	685b      	ldreq	r3, [r3, #4]
 8000a0c:	1809      	addeq	r1, r1, r0
 8000a0e:	6021      	streq	r1, [r4, #0]
 8000a10:	e7ed      	b.n	80009ee <_free_r+0x1e>
 8000a12:	461a      	mov	r2, r3
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	b10b      	cbz	r3, 8000a1c <_free_r+0x4c>
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d9fa      	bls.n	8000a12 <_free_r+0x42>
 8000a1c:	6811      	ldr	r1, [r2, #0]
 8000a1e:	1850      	adds	r0, r2, r1
 8000a20:	42a0      	cmp	r0, r4
 8000a22:	d10b      	bne.n	8000a3c <_free_r+0x6c>
 8000a24:	6820      	ldr	r0, [r4, #0]
 8000a26:	4401      	add	r1, r0
 8000a28:	1850      	adds	r0, r2, r1
 8000a2a:	4283      	cmp	r3, r0
 8000a2c:	6011      	str	r1, [r2, #0]
 8000a2e:	d1e0      	bne.n	80009f2 <_free_r+0x22>
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	6053      	str	r3, [r2, #4]
 8000a36:	4408      	add	r0, r1
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	e7da      	b.n	80009f2 <_free_r+0x22>
 8000a3c:	d902      	bls.n	8000a44 <_free_r+0x74>
 8000a3e:	230c      	movs	r3, #12
 8000a40:	602b      	str	r3, [r5, #0]
 8000a42:	e7d6      	b.n	80009f2 <_free_r+0x22>
 8000a44:	6820      	ldr	r0, [r4, #0]
 8000a46:	1821      	adds	r1, r4, r0
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	bf04      	itt	eq
 8000a4c:	6819      	ldreq	r1, [r3, #0]
 8000a4e:	685b      	ldreq	r3, [r3, #4]
 8000a50:	6063      	str	r3, [r4, #4]
 8000a52:	bf04      	itt	eq
 8000a54:	1809      	addeq	r1, r1, r0
 8000a56:	6021      	streq	r1, [r4, #0]
 8000a58:	6054      	str	r4, [r2, #4]
 8000a5a:	e7ca      	b.n	80009f2 <_free_r+0x22>
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000074 	.word	0x20000074

08000a64 <_init>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	bf00      	nop
 8000a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6a:	bc08      	pop	{r3}
 8000a6c:	469e      	mov	lr, r3
 8000a6e:	4770      	bx	lr

08000a70 <_fini>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	bf00      	nop
 8000a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a76:	bc08      	pop	{r3}
 8000a78:	469e      	mov	lr, r3
 8000a7a:	4770      	bx	lr
